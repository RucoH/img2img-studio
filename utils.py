# utils.py

"""
ğŸ‡¹ğŸ‡· Img2Img Studio iÃ§in yardÄ±mcÄ± fonksiyonlar:
- dosya ve klasÃ¶r yÃ¶netimi
- gÃ¶rsel yÃ¼kleme/kaydetme
- basit gÃ¼nlÃ¼k (logging)
ğŸ‡¬ğŸ‡§ Helper utilities for Img2Img Studio:
- file and directory management
- image loading/saving
- simple logging
"""

import os
from PIL import Image
from datetime import datetime

# ğŸ‡¹ğŸ‡· KlasÃ¶r var mÄ± kontrol et, yoksa oluÅŸtur
# ğŸ‡¬ğŸ‡§ Ensure directory exists, create if not
def ensure_dir(path: str):
    """
    ğŸ‡¹ğŸ‡· Verilen dizin var mÄ± kontrol eder, yoksa oluÅŸturur.
    ğŸ‡¬ğŸ‡§ Checks if the given directory exists and creates it if missing.
    """
    os.makedirs(path, exist_ok=True)

# ğŸ‡¹ğŸ‡· GÃ¶rseli kaydeder, zaman damgasÄ± ile isim Ã¼retir
# ğŸ‡¬ğŸ‡§ Saves image with timestamped filename
def save_image(image: Image.Image, output_dir: str, prefix: str = "output") -> str:
    """
    ğŸ‡¹ğŸ‡· PIL gÃ¶rselini output dizinine kaydeder, dosya adÄ±nda zaman damgasÄ± kullanÄ±r.
    ğŸ‡¬ğŸ‡§ Saves a PIL image to the output directory with a timestamp-based filename.

    Args:
        image (Image.Image): ğŸ‡¹ğŸ‡· Kaydedilecek gÃ¶rsel objesi / ğŸ‡¬ğŸ‡§ PIL Image to save.
        output_dir (str): ğŸ‡¹ğŸ‡· GÃ¶rselin kaydedileceÄŸi dizin / ğŸ‡¬ğŸ‡§ Directory to save the image in.
        prefix (str): ğŸ‡¹ğŸ‡· Dosya adÄ± Ã¶neki (varsayÄ±lan 'output') / ğŸ‡¬ğŸ‡§ Filename prefix (default 'output').

    Returns:
        str: ğŸ‡¹ğŸ‡· Kaydedilen dosya yolu / ğŸ‡¬ğŸ‡§ Full path of the saved file.
    """
    ensure_dir(output_dir)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{prefix}_{timestamp}.png"
    full_path = os.path.join(output_dir, filename)
    image.save(full_path)
    return full_path

# ğŸ‡¹ğŸ‡· GÃ¶rsel dosyasÄ±nÄ± aÃ§ar ve yeniden boyutlandÄ±rÄ±r
# ğŸ‡¬ğŸ‡§ Opens and resizes image from disk
def load_and_resize_image(path: str, size: tuple = (512, 512)) -> Image.Image:
    """
    ğŸ‡¹ğŸ‡· Diskten bir gÃ¶rsel aÃ§ar, RGB'ye Ã§evirir ve belirtilen boyuta yeniden boyutlandÄ±rÄ±r.
    ğŸ‡¬ğŸ‡§ Opens an image file, converts to RGB, and resizes to the given size.

    Args:
        path (str): ğŸ‡¹ğŸ‡· GÃ¶rsel dosya yolu / ğŸ‡¬ğŸ‡§ Path to the image file.
        size (tuple): ğŸ‡¹ğŸ‡· (geniÅŸlik, yÃ¼kseklik) / ğŸ‡¬ğŸ‡§ (width, height)

    Returns:
        Image.Image: ğŸ‡¹ğŸ‡· Yeniden boyutlandÄ±rÄ±lmÄ±ÅŸ PIL gÃ¶rseli / ğŸ‡¬ğŸ‡§ Resized PIL Image.
    """
    img = Image.open(path).convert("RGB")
    return img.resize(size)

# ğŸ‡¹ğŸ‡· Basit zaman damgalÄ± log mesajÄ± yazdÄ±rÄ±r
# ğŸ‡¬ğŸ‡§ Prints a timestamped log message
def log(message: str):
    """
    ğŸ‡¹ğŸ‡· Konsola zaman damgalÄ± bir mesaj yazdÄ±rÄ±r.
    ğŸ‡¬ğŸ‡§ Prints a timestamped message to the console.

    Args:
        message (str): ğŸ‡¹ğŸ‡· Loglanacak mesaj / ğŸ‡¬ğŸ‡§ Message to log.
    """
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] {message}")
